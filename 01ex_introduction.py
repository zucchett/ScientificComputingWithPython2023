# -*- coding: utf-8 -*-
"""01ex_introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sr-SC9tbBY7Wr1Lmx0byRSl--2msS1vd

You can solve these exercises in the room or at home. For this week, and the next 3 weeks, exercises have to be solved by creating a single dedicated `.py` file called `01ex_introduction.py`.

You can divide the individual exercises in the source code with appropriate comments (`#`).

The exercises need to run without errors with `python3 01ex_introduction.py`.

1\. **The HelloWorld replacement**

a) Write a program that:
- prints the numbers from 1 to 100
- but for multiples of three print "`Hello`" instead of the number and for the multiples of five print "`World`"
- for numbers which are multiples of both three and five print "`HelloWorld`".

b) Put the result in a tuple and substitute "`Hello`" with "`Python`" and "`World`" with "`Works`".
"""

my_list=['Hello World' if x%15==0 else 'Hello' if x%3==0   else 'World' if x%5==0 else  x for x in range(1, 101)]
print (my_list)

my_list_replaced = ['Python' if x=='Hello' else "Works" if x=="World" else x for x in my_list ]

my_tuple = tuple(my_list_replaced);
print(my_tuple)

"""2\. **The swap**

Write a program that swaps the values of two input variables `x` and `y` from command line (whatever the type).

Try to do that without using a temporary variable, exploiting the Python syntax.
"""

x, y = 5, 'b'
print('x =', x, 'y =', y)
a = x
x = y
y = a
print('x =', x, 'y =', y)

"""3\. **Computing the distance**

Write a program that calculates and prints the euclidean distance between two given points $u$ and $v$ in a 2D space, where $u$ and $v$ are both 2-tuples $(x,y)$.

Example: if $u=(3,0)$ and $v=(0,4)$, the function should return $5$.

*Hint:* in order to compute the square root, import the `math` library with `import math` and use `math.sqrt()`.
"""

import math
x, y, z, w = input("Set the value of x: "), input("Set the value of y: "), input("Set the value of z: "), input("Set the value of w: ")
u = (int(x),int(y))
v = (int(z),int(w))
a = ((v[0]-u[0])**2)+((v[1]-u[1])**2)
Ed = math.sqrt(a)
print (Ed)

"""4\. **Counting letters**

Write a program that calculates the number of times each character occurs in a given string. Ignore differences in capitalization.

The test strings are:
"""

s1 = "Write a program that prints the numbers from 1 to 100. \
But for multiples of three print Hello instead of the number and for the multiples of five print World. \
For numbers which are multiples of both three and five print HelloWorld."
s2 = "The quick brown fox jumps over the lazy dog"

s1 = s1.lower()
dict= {}
for char in list(s1):
  if(char not in dict.keys()):
    dict[char] = 1
  else:
    dict[char] =dict[char]+1
print (dict)

s2 = s2.lower()
dict= {}
for char in list(s2):
  if(char not in dict.keys()):
    dict[char] = 1
  else:
    dict[char] = dict[char]+1

print (dict)

"""5\. **Isolating the unique**

Write a program that determines and counts the unique numbers (numbers with only one occurrence) in the list:
"""

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]

for i in l:
  if l.count(i)>1:
   l.remove(i)

print(len(l))

"""Do the same exploiting only the Python data structures.

6\. **Casting**

Write a program that:
* reads from command line two variables, that can be either `int`, `float`, or `str`.
* use the `try`/`except` expressions to perform the addition of these two variables, only if possible
* print the result without making the code crash for all the `int`/`float`/`str` input combinations.
"""

x = input("enter x: ")
y = input("enter y: ")
try:
  x=float(x)
  y=float(x)
  print(x+y);
except:
  print('one or both of the inputs are not numbers.')

"""7\. **Cubes**

Create a list of the cubes of *x* for *x* in *[0, 10]* using:

a) a for loop

b) a list comprehension
"""

# FOR LOOP
a_list=[]
for x in range(11):
  x=x**2
  a_list.append(x)
print (a_list)

#LIST COMPREHENSION
b_list=[x**2 for x in range(11)]
print(b_list)

"""8\. **List comprehension**

Write, using the list comprehension, a single-line expression that gets the same result as the code in the cell below.
"""

a = []
for i in range(3):
    for j in range(4):
        a.append((i, j))
print(a)

b = [(x,y) for x in range(3) for y in range(4)]
print(b)

"""9\. **Nested list comprehension**

> A Pythagorean triple is an integer solution to the Pythagorean theorem $a^2+b^2=c^2$. The first Pythagorean triple is (3, 4, 5).

Find and put in a tuple all unique Pythagorean triples for the positive integers $a$, $b$ and $c$ with $c < 100$.
"""

l=[(a, b, c) for c in range(1,100) for b in range(1,100) for a in range(1,100) if a**2 + b**2 == c**2]
print(l)

"""10\. **Normalization of a N-dimensional vector**

Write a program that takes an N-dimensional vector, e.g. a variable-length tuple of numbers, and normalizes it to one (in such a way that the squared sum of all the entries is equal to 1).
"""

import math
a= (1.22,4.5,5,6,5.6)

a_normalized = [x/math.sqrt(sum([x**2 for x in list(a)])) for x in list(a)]
print(a_normalized)

#test:
z=0
for j in a_normalized:
  z+= j*j

print(z)

"""11\. **The Fibonacci sequence**

Calculate the first 20 numbers of the [Fibonacci sequence](https://en.wikipedia.org/wiki/Fibonacci_number) using only `for` or `while` loops.
"""

num = 20
n1, n2 = 0, 1
fi_list=[n1, n2]

for i in range(2, num):
    n3 = n1 + n2
    n1 = n2
    n2 = n3
    fi_list.append(n3)

print("Fibonacci Series:", fi_list)