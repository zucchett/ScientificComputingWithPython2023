# -*- coding: utf-8 -*-
"""03ex_representation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1azvvDuxaBXVsItrcQMEYjTMvOEXrhlzV

You can solve these exercises in the room or at home. For this week, and the next 3 weeks, exercises have to be solved by creating a single dedicated `.py` file called `03ex_representation.py`.

You can divide the individual exercises in the source code with appropriate comments (`#`).

The exercises need to run without errors with `python3 03ex_representation.py`.

1\. **Number representation**

Write a function that converts integer numbers among the bin, dec, and hex representations (bin<->dec<->hex).
Determine the input type in the function, and pass another argument to choose the output representation.
"""

from typing import Literal

conversions = Literal['DecToHex','HexToDec','DecToBin','BinToDec','BinToHex','HexToBin']

def convertNumber(num,type:conversions):
  match type:
    case'DecToHex':
      return hex(num)
    case'HexToDec':
      return int(num,0)
    case'DecToBin':
      return bin(num)
    case'BinToDec':
      return int(num,0)
    case'BinToHex':
      return hex(int(num,0))
    case'HexToBin':
      return bin(int(num,0))
    case _:
      raise ValueError('not supported convesion type.')
a = 2334
a_dec_to_hex = convertNumber(a,'DecToHex')
a_dec_to_bin = convertNumber(a,'DecToBin')
a_hex_to_dec = convertNumber(a_dec_to_hex,'HexToDec')
a_bin_to_dec = convertNumber(a_dec_to_bin,'BinToDec')
a_hex_to_bin = convertNumber(a_dec_to_hex,'HexToBin')
a_bin_to_hex = convertNumber(a_dec_to_bin,'BinToHex')
print('a_dec_to_hex',a_dec_to_hex)
print('a_dec_to_bin',a_dec_to_bin)
print('a_hex_to_dec',a_hex_to_dec)
print('a_bin_to_dec',a_bin_to_dec)
print('a_hex_to_bin',a_hex_to_bin)
print('a_bin_to_hex',a_bin_to_hex)

"""2\. **32-bit floating point number**

Write a function that converts a 32 bit binary string (for example, `110000101011000000000000`) into a single precision floating point in decimal representation. Interpret the various bits as sign, fractional part of the mantissa and exponent, according to the IEEE 754 reccommendations.
"""

def manualBin(num):
  bits = list(str(num))
  s = 1 if bits[0] == '0' else -1;
  m_e = bits[1:9];
  mantissa = bits[9:];
  f=1;
  for i in range(len(mantissa)) :
    f+=int(mantissa[i])/pow(2,i)
  ex=0
  for j in range(len(m_e)) :
    ex+=int(m_e[j]) * pow(2,7-j)
  print('s',s);
  print('ex',ex);
  print('ex-base',ex-127);
  print('f',f);
  return s*f*pow(2,ex-127)


print(manualBin('10000110101010101101001011010110'))

"""3\. **Underflow and overflow**

Write a program to determine the approximate underflow and overflow limits (within a factor of 2) for floating point numbers on your computer.

*Hint*: define two variables initialized to 1, and halve/double them for a sufficient amount of times to exceed the under/over-flow limits.
"""

# underflow :the last number before zero is underflow limit of my computer
a=float(1)
iter = 1
while True:
  a = a/2
  iter+=1
  print('iteration number : ', iter ,"a=",a)
  if(a==0.0):
    break

import math
# overflow: the last number before infinity is underflow limit of my computer
a=float(1)
iter = 1
while True:
  a = a*2
  iter+=1
  print('iteration number : ', iter ,"a=",a)
  if(a == math.inf):
    break

"""4\. **Machine precision**

Similarly to the previous exercise, write a program to determine the machine precision for floating point numbers.

*Hint*: define a new variable by adding an increasingly smaller value and check when the addition starts to have no effect on the number.
"""

a=1
b=0.1
iter=1
while True :
  c1=a+pow(b,iter-1);
  c2=a+pow(b,iter);
  print('iteration number: ', iter , 'a+(10^-',iter,') =',c2 )
  iter+=1
  if(c1==c2):
    break

#the percition of my machin is 10^-15

"""5\. **Quadratic solution**

Write a function that takes in input three parameters $a$, $b$ and $c$ and prints out the two solutions to the quadratic equation $ax^2+bx+c=0$ using the standard formula:
$$
x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}
$$

(a) use the function to compute the solution for $a=0.001$, $b=1000$ and $c=0.001$

(b) re-express the standard solution formula by multiplying the numerator and the denominator by $-b\mp\sqrt{b^2-4ac}$ and again find the solution for $a=0.001$, $b=1000$ and $c=0.001$. How does it compare with what has been previously obtained, and why? (add the answer to a Python comment)

(c) write a function that computes the roots of a quadratic equation accurately in all cases
"""

def delta(a,b,c):
  return math.sqrt(b*b -4*a*c)

def solution1(a,b,c):
  return ((-b+delta(a,b,c))/(2*a),(-b-delta(a,b,c))/(2*a))
def solution2(a,b,c):
  return (((-b+delta(a,b,c))*(-b+delta(a,b,c)))/((2*a)*(-b+delta(a,b,c))),((-b-delta(a,b,c))*(-b-delta(a,b,c)))/((2*a)*(-b-delta(a,b,c))))
print('roots calculated with solution1:',solution1(0.001,1000,0.001))
print('roots calculated with solution2:',solution2(0.001,1000,0.001))
# the 2 function gives the same result because mutiplying a number in the numerator and the denominator will not change the value
def deltaComplex(a,b,c):
  if((b*b -4*a*c)>=0):
    return math.sqrt(b*b -4*a*c)
  if((b*b -4*a*c)<0):
    return complex(0,math.sqrt(-1*(b*b -4*a*c)))

def solutionAll(a,b,c):
  return ((-b+deltaComplex(a,b,c))/(2*a),(-b-deltaComplex(a,b,c))/(2*a))
print('roots calculated with solutionAll:',solutionAll(10,2,10))

"""6\. **The derivative**

Write a program that implements the function $f(x)=x(x−1)$

(a) Calculate the derivative of the function at the point $x = 1$ using the derivative definition:

$$
\frac{{\rm d}f}{{\rm d}x} = \lim_{\delta\to0} \frac{f(x+\delta)-f(x)}{\delta}
$$

with $\delta = 10^{−2}$. Calculate the true value of the same derivative analytically and compare it with the answer your program gives. The two will not agree perfectly. Why?

(b) Repeat the calculation for $\delta = 10^{−4}, 10^{−6}, 10^{−8}, 10^{−10}, 10^{−12}$ and $10^{−14}$. How does the accuracy scale with $\delta$?
"""

# analytically we know that derivitive of f(x)=x(x-1) is f'(x) = 2*x - 1 => f'(1) = 1
def fx(x):
  return x*(x-1)

derivative_at_1_2 =( fx(1+pow(0.1,2))-fx(1) )/ pow(0.1,2) # = 1.0100000000000007
derivative_at_1_4 =( fx(1+pow(0.1,4))-fx(1) )/ pow(0.1,4) # = 1.0000999999998896 accuracy gets better
derivative_at_1_6 =( fx(1+pow(0.1,6))-fx(1) )/ pow(0.1,6)  # = 1.0000009999177328 accuracy gets better
derivative_at_1_8 =( fx(1+pow(0.1,8))-fx(1) )/ pow(0.1,8)   # = 1.0000000039225283 accuracy gets better
derivative_at_1_10 =( fx(1+pow(0.1,10))-fx(1) )/ pow(0.1,10) # = 1.0000000828403706 accuracy gets worst
derivative_at_1_12 =( fx(1+pow(0.1,12))-fx(1) )/ pow(0.1,12) # = 1.0000889005833407 accuracy gets worst
derivative_at_1_14 =( fx(1+pow(0.1,14))-fx(1) )/ pow(0.1,14) # = 0.99920072216265  accuracy gets worst

print('derivative_at_1_2  = ',derivative_at_1_2 )
print('derivative_at_1_4  = ',derivative_at_1_4 )
print('derivative_at_1_6  = ',derivative_at_1_6 )
print('derivative_at_1_8  = ',derivative_at_1_8 )
print('derivative_at_1_10 = ',derivative_at_1_10)
print('derivative_at_1_12 = ',derivative_at_1_12)
print('derivative_at_1_14 = ',derivative_at_1_14)

"""answer: starting from $\delta = 10^{−2}$ accuracy is getting better as we are getting closer to absolutely derivative = 1 until $\delta = 10^{−8}$, ather this point we see that get farthur from 1.  the reason might be the computing with this very small numbers end to also smaller numbers that pass the underflow limit of machine.

7\. **Integral of a semicircle**

Consider the integral of the semicircle of radius 1:
$$
I=\int_{-1}^{1} \sqrt(1-x^2) {\rm d}x
$$
which is known to be $I=\frac{\pi}{2}=1.57079632679...$.

Alternatively we can use the Riemann definition of the integral:
$$
I=\lim_{N\to\infty} \sum_{k=1}^{N} h y_k
$$

with $h=2/N$ the width of each of the $N$ slices the domain is divided into and where
$y_k$ is the value of the function at the $k-$th slice.

(a) Write a program to compute the integral with $N=100$. How does the result compare to the true value?

(b) How much can $N$ be increased if the computation needs to be run in less than a second? What is the gain in running it for 1 minute? Use `timeit` to measure the time.
"""

# Commented out IPython magic to ensure Python compatibility.
def f_semi(x):
  return math.sqrt(1-(x*x))

def integral(N,start,end):
  integral = 0
  for i in range(N):
    integral+=(((end-start)/N)*f_semi(start+i*(end-start)/N))
  return integral

n=100
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)

n=1000
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)

n=1800
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)

n=2000
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)
n=2500
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)

n=3000
print('N: ',n, 'time:' )
print(integral(n,-1,1))
# %timeit integral(n,-1,1)

"""as we can see if the program should be run under 1 sec we can move up N at most to 1800 with my machine. because at 1800 we see 1.01ms at 1000 loops witch is around 1s."""